{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.browserIncompatibleUI = exports.browserIncompatible = exports.drawPlane = exports.projectionMatrixFromCameraModel = exports.invert = exports.cameraDefaultDeviceID = exports.z = void 0;\n\nconst zappar_cv_1 = require(\"@zappar/zappar-cv\");\n\nconst gl_matrix_1 = require(\"gl-matrix\");\n\nconst version_1 = require(\"./version\");\n\nlet _z;\n/**\n * @ignore\n*/\n\n\nfunction z() {\n  if (!_z) {\n    console.log(`Zappar JS v${version_1.VERSION}`);\n    _z = zappar_cv_1.initialize();\n  }\n\n  return _z;\n}\n\nexports.z = z;\n/**\n * Gets the ID or the default rear- or user-facing camera.\n * @param userFacing - Whether 'selfie' camera ID should be returned.\n * @returns The camera device ID.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\n*/\n\nfunction cameraDefaultDeviceID(userFacing) {\n  return z().camera_default_device_id(userFacing || false);\n}\n\nexports.cameraDefaultDeviceID = cameraDefaultDeviceID;\n/**\n * Inverts a 4x4 Float32Array Matrix.\n * @param m - The 4x4 matrix to be inverted.\n * @returns The inverted Float32Array matrix.\n*/\n\nfunction invert(m) {\n  const ret = gl_matrix_1.mat4.create();\n  gl_matrix_1.mat4.invert(ret, m);\n  return ret;\n}\n\nexports.invert = invert;\n/**\n  * Calculates the projection matrix from a given camera model (i.e. intrinsic camera parameters)≥\n  * @param model - The camera model.\n  * @param renderWidth - The width of the canvas.\n  * @param renderHeight - The height of the canvas.\n  * @param zNear - The near clipping plane.\n  * @param zFar - The far clipping plane.\n  * @returns A 4x4 column-major projection matrix.\n */\n\nfunction projectionMatrixFromCameraModel(model, renderWidth, renderHeight, zNear = 0.1, zFar = 100) {\n  return z().projection_matrix_from_camera_model_ext(model, renderWidth, renderHeight, zNear, zFar);\n}\n\nexports.projectionMatrixFromCameraModel = projectionMatrixFromCameraModel;\n/**\n * @ignore\n*/\n\nfunction drawPlane(gl, projectionMatrix, cameraMatrix, targetMatrix, texture) {\n  z().draw_plane(gl, projectionMatrix, cameraMatrix, targetMatrix, texture);\n}\n\nexports.drawPlane = drawPlane;\n/**\n * Detects if your page is running in a browser that's not supported\n * @returns 'true' if the browser is incompatible.\n*/\n\nfunction browserIncompatible() {\n  return z().browser_incompatible();\n}\n\nexports.browserIncompatible = browserIncompatible;\n/**\n * Shows a full-page dialog that informs the user they're using an unsupported browser,\n * and provides a button to 'copy' the current page URL so they can 'paste' it into the\n * address bar of a compatible alternative.\n*/\n\nfunction browserIncompatibleUI() {\n  z().browser_incompatible_ui();\n}\n\nexports.browserIncompatibleUI = browserIncompatibleUI;","map":{"version":3,"sources":["/Users/hoyiki/Desktop/react-three-example-instant-tracking-cube/node_modules/@zappar/zappar/lib/zappar.js"],"names":["Object","defineProperty","exports","value","browserIncompatibleUI","browserIncompatible","drawPlane","projectionMatrixFromCameraModel","invert","cameraDefaultDeviceID","z","zappar_cv_1","require","gl_matrix_1","version_1","_z","console","log","VERSION","initialize","userFacing","camera_default_device_id","m","ret","mat4","create","model","renderWidth","renderHeight","zNear","zFar","projection_matrix_from_camera_model_ext","gl","projectionMatrix","cameraMatrix","targetMatrix","texture","draw_plane","browser_incompatible","browser_incompatible_ui"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qBAAR,GAAgCF,OAAO,CAACG,mBAAR,GAA8BH,OAAO,CAACI,SAAR,GAAoBJ,OAAO,CAACK,+BAAR,GAA0CL,OAAO,CAACM,MAAR,GAAiBN,OAAO,CAACO,qBAAR,GAAgCP,OAAO,CAACQ,CAAR,GAAY,KAAK,CAA9L;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,mBAAD,CAA3B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,WAAD,CAA3B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAIG,EAAJ;AACA;AACA;AACA;;;AACA,SAASL,CAAT,GAAa;AACT,MAAI,CAACK,EAAL,EAAS;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAa,cAAaH,SAAS,CAACI,OAAQ,EAA5C;AACAH,IAAAA,EAAE,GAAGJ,WAAW,CAACQ,UAAZ,EAAL;AACH;;AACD,SAAOJ,EAAP;AACH;;AACDb,OAAO,CAACQ,CAAR,GAAYA,CAAZ;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,qBAAT,CAA+BW,UAA/B,EAA2C;AACvC,SAAOV,CAAC,GAAGW,wBAAJ,CAA6BD,UAAU,IAAI,KAA3C,CAAP;AACH;;AACDlB,OAAO,CAACO,qBAAR,GAAgCA,qBAAhC;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,MAAT,CAAgBc,CAAhB,EAAmB;AACf,QAAMC,GAAG,GAAGV,WAAW,CAACW,IAAZ,CAAiBC,MAAjB,EAAZ;AACAZ,EAAAA,WAAW,CAACW,IAAZ,CAAiBhB,MAAjB,CAAwBe,GAAxB,EAA6BD,CAA7B;AACA,SAAOC,GAAP;AACH;;AACDrB,OAAO,CAACM,MAAR,GAAiBA,MAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,+BAAT,CAAyCmB,KAAzC,EAAgDC,WAAhD,EAA6DC,YAA7D,EAA2EC,KAAK,GAAG,GAAnF,EAAwFC,IAAI,GAAG,GAA/F,EAAoG;AAChG,SAAOpB,CAAC,GAAGqB,uCAAJ,CAA4CL,KAA5C,EAAmDC,WAAnD,EAAgEC,YAAhE,EAA8EC,KAA9E,EAAqFC,IAArF,CAAP;AACH;;AACD5B,OAAO,CAACK,+BAAR,GAA0CA,+BAA1C;AACA;AACA;AACA;;AACA,SAASD,SAAT,CAAmB0B,EAAnB,EAAuBC,gBAAvB,EAAyCC,YAAzC,EAAuDC,YAAvD,EAAqEC,OAArE,EAA8E;AAC1E1B,EAAAA,CAAC,GAAG2B,UAAJ,CAAeL,EAAf,EAAmBC,gBAAnB,EAAqCC,YAArC,EAAmDC,YAAnD,EAAiEC,OAAjE;AACH;;AACDlC,OAAO,CAACI,SAAR,GAAoBA,SAApB;AACA;AACA;AACA;AACA;;AACA,SAASD,mBAAT,GAA+B;AAC3B,SAAOK,CAAC,GAAG4B,oBAAJ,EAAP;AACH;;AACDpC,OAAO,CAACG,mBAAR,GAA8BA,mBAA9B;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,qBAAT,GAAiC;AAC7BM,EAAAA,CAAC,GAAG6B,uBAAJ;AACH;;AACDrC,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.browserIncompatibleUI = exports.browserIncompatible = exports.drawPlane = exports.projectionMatrixFromCameraModel = exports.invert = exports.cameraDefaultDeviceID = exports.z = void 0;\nconst zappar_cv_1 = require(\"@zappar/zappar-cv\");\nconst gl_matrix_1 = require(\"gl-matrix\");\nconst version_1 = require(\"./version\");\nlet _z;\n/**\n * @ignore\n*/\nfunction z() {\n    if (!_z) {\n        console.log(`Zappar JS v${version_1.VERSION}`);\n        _z = zappar_cv_1.initialize();\n    }\n    return _z;\n}\nexports.z = z;\n/**\n * Gets the ID or the default rear- or user-facing camera.\n * @param userFacing - Whether 'selfie' camera ID should be returned.\n * @returns The camera device ID.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\n*/\nfunction cameraDefaultDeviceID(userFacing) {\n    return z().camera_default_device_id(userFacing || false);\n}\nexports.cameraDefaultDeviceID = cameraDefaultDeviceID;\n/**\n * Inverts a 4x4 Float32Array Matrix.\n * @param m - The 4x4 matrix to be inverted.\n * @returns The inverted Float32Array matrix.\n*/\nfunction invert(m) {\n    const ret = gl_matrix_1.mat4.create();\n    gl_matrix_1.mat4.invert(ret, m);\n    return ret;\n}\nexports.invert = invert;\n/**\n  * Calculates the projection matrix from a given camera model (i.e. intrinsic camera parameters)≥\n  * @param model - The camera model.\n  * @param renderWidth - The width of the canvas.\n  * @param renderHeight - The height of the canvas.\n  * @param zNear - The near clipping plane.\n  * @param zFar - The far clipping plane.\n  * @returns A 4x4 column-major projection matrix.\n */\nfunction projectionMatrixFromCameraModel(model, renderWidth, renderHeight, zNear = 0.1, zFar = 100) {\n    return z().projection_matrix_from_camera_model_ext(model, renderWidth, renderHeight, zNear, zFar);\n}\nexports.projectionMatrixFromCameraModel = projectionMatrixFromCameraModel;\n/**\n * @ignore\n*/\nfunction drawPlane(gl, projectionMatrix, cameraMatrix, targetMatrix, texture) {\n    z().draw_plane(gl, projectionMatrix, cameraMatrix, targetMatrix, texture);\n}\nexports.drawPlane = drawPlane;\n/**\n * Detects if your page is running in a browser that's not supported\n * @returns 'true' if the browser is incompatible.\n*/\nfunction browserIncompatible() {\n    return z().browser_incompatible();\n}\nexports.browserIncompatible = browserIncompatible;\n/**\n * Shows a full-page dialog that informs the user they're using an unsupported browser,\n * and provides a button to 'copy' the current page URL so they can 'paste' it into the\n * address bar of a compatible alternative.\n*/\nfunction browserIncompatibleUI() {\n    z().browser_incompatible_ui();\n}\nexports.browserIncompatibleUI = browserIncompatibleUI;\n"]},"metadata":{},"sourceType":"script"}